{"version":3,"file":"sourceArray.js","sourceRoot":"","sources":["../../../src/utils/sourceArray.ts"],"names":[],"mappings":"AAAA,mBAAmB,GAAW,EAAE,MAAc,EAAE,GAAW;IACzD,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;IACxB,OAAO,MAAM,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC;QAC9B,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAA;IAC/B,CAAC;IACD,MAAM,CAAC,MAAM,CAAA;AACf,CAAC;AA4BD;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,sBAAsB,QAAgB,EAAE,IAAwB;IACpE,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;IAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,IAAI,QAAQ,CAAA;IAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,IAAI,SAAS,CAAA;IAE7C,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,IAAI,IAAI,GAAG,CAAC,CAAA;IACZ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACf,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACtB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IACtB,CAAC;IACD,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,IAAI,IAAI,GAAG,CAAC,CAAA;IACZ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACrB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACrB,CAAC;IACD,MAAM,MAAM,GAAG,EAAE,CAAA;IACjB,GAAG,CAAC,CAAC,IAAI,IAAI,GAAG,MAAM,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC;QAChD,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,MAAM,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC;YACnD,MAAM,CAAC,IAAI,CAAC,QAAQ;iBACjB,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;iBAC9C,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC,CACjD,CAAA;QACH,CAAC;IACH,CAAC;IACD,MAAM,CAAC,MAAM,CAAA;AACf,CAAC","sourcesContent":["function padNumber(num: number, length: number, pad: string): string {\n  let result = String(num)\n  while (result.length < length) {\n    result = String(pad) + result\n  }\n  return result\n}\n\n/**\n * Options for {@link sourceArray} function\n */\nexport interface SourceArrayOptions {\n  /**\n   * Minimum number of digits\n   */\n  digits?: number\n  /**\n   * Start and end frame numbers\n   */\n  frame?: number[]\n  /**\n   * Start and end lane numbers\n   */\n  lane?: number[]\n  /**\n   * Variable to be replaced by a frame number e.g. '{frame}'\n   */\n  framePlacer?: string\n  /**\n   * Variable to be replaced by a lane number e.g. '{lane}'\n   */\n  lanePlacer?: string\n}\n\n/**\n * Generates an array of source strings\n *\n * @remarks\n * Takes a template string and generates an array of strings by interpolating {lane} and {frame} placeholders.\n *\n * ```\n * sourceArray('http://example.com/image_{frame}.jpg, { frame: [1, 3], digits: 2 })\n * // gives:\n * // [ 'http://example.com/image_01.jpg', 'http://example.com/image_02.jpg', 'http://example.com/image_03.jpg' ]\n *\n * sourceArray('http://example.com/image_FRAME.jpg, { frame: [1, 3], digits: 2, framePlacer: 'FRAME' })\n * // gives:\n * // [ 'http://example.com/image_01.jpg', 'http://example.com/image_02.jpg', 'http://example.com/image_03.jpg' ]\n * ```\n *\n * @param template - The template string\n * @param opts - Interpolation options\n *\n * @public\n */\nexport function sourceArray(template: string, opts: SourceArrayOptions) {\n  const digits = opts.digits || 2\n  const lPlacer = opts.lanePlacer || '{lane}'\n  const fPlacer = opts.framePlacer || '{frame}'\n\n  let fStart = 0\n  let fEnd = 0\n  if (opts.frame) {\n    fStart = opts.frame[0]\n    fEnd = opts.frame[1]\n  }\n  let lStart = 0\n  let lEnd = 0\n  if (opts.lane) {\n    lStart = opts.lane[0]\n    lEnd = opts.lane[1]\n  }\n  const result = []\n  for (let lane = lStart; lane <= lEnd; lane += 1) {\n    for (let frame = fStart; frame <= fEnd; frame += 1) {\n      result.push(template\n        .replace(lPlacer, padNumber(lane, digits, '0'))\n        .replace(fPlacer, padNumber(frame, digits, '0'))\n      )\n    }\n  }\n  return result\n}\n"]}