{"version":3,"file":"jquery.js","sourceRoot":"","sources":["../../../src/core/jquery.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,UAAU,CAAA;AAC5B,OAAO,EAAE,GAAG,EAAE,MAAM,OAAO,CAAA;AAC3B,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAA;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AAEvC,mBAAmB,MAAoB,EAAE,KAAU;IACjD,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,CAAA;IACvB,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IAChC,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;QACrB,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACpC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,CAAA;QACpC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAA;IACjB,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE;YACvB,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACpC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,OAAO,CAAC,IAAI,CAAC,CAAA;YACf,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IACD,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QACzD,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAA;IAC9B,CAAC;IACD,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAA;IAC3E,CAAC;IAED,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;AAC/C,CAAC;AAED,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,SAAS,CAAA","sourcesContent":["import { $ } from '../utils'\nimport { Api } from './api'\nimport { createOrUpdate, destroy } from './boot'\nimport { namespace } from './constants'\n\nfunction extension(option: string | any, value: any) {\n  const $target = $(this)\n  if (option === 'data') {\n    return $target.data(namespace)\n  }\n  if (option === 'api') {\n    const data = $target.data(namespace)\n    data.api = data.api || new Api(data)\n    return data.api\n  }\n  if (option === 'destroy') {\n    return $target.each(() => {\n      const data = $target.data(namespace)\n      if (data) {\n        destroy(data)\n      }\n    })\n  }\n  if (arguments.length === 2 && typeof option === 'string') {\n    option = { [option]: value }\n  }\n  if (typeof option === 'object') {\n    return createOrUpdate($.extend(true, { target: $target }, option)).target\n  }\n\n  throw new Error('Invalid call to spritespin')\n}\n\n$.fn[namespace] = extension\n"]}