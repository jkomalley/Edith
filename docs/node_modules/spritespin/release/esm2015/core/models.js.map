{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/core/models.ts"],"names":[],"mappings":"","sourcesContent":["import { PreloadProgress, SheetSpec } from '../utils'\n\nexport type Callback = (e: any, data: Data) => void\n\n/**\n * Additional callback options for SpriteSpin\n *\n * @public\n */\nexport interface CallbackOptions {\n  /**\n   * Occurs when the plugin has been initialized, but before loading the source files.\n   */\n  onInit?: Callback\n  /**\n   * Occurs when any source file has been loaded and the progress has changed.\n   */\n  onProgress?: Callback\n  /**\n   * Occurs when all source files have been loaded and spritespin is ready to update and draw.\n   */\n  onLoad?: Callback\n  /**\n   * Occurs when the frame number has been updated (e.g. during animation)\n   */\n  onFrame?: Callback\n  /**\n   * Occurs when the frame number has changed.\n   */\n  onFrameChanged?: Callback\n  /**\n   * Occurs when all update is complete and frame can be drawn\n   */\n  onDraw?: Callback\n  /**\n   * Occurs when spritespin has been loaded and the first draw operation is complete\n   */\n  onComplete?: Callback\n}\n\nexport type SizeMode = 'original' | 'fit' | 'fill' | 'stretch'\nexport type RenderMode = 'canvas' | 'image' | 'background'\nexport type Orientation = 'horizontal' | 'vertical'\n\n/**\n * Options for SpriteSpin\n *\n * @public\n */\nexport interface Options extends CallbackOptions {\n  /**\n   * The target element which should hold the spritespin instance. This is usually already specified by the jQuery selector but can be overridden here.\n   */\n  target?: any,\n\n  /**\n   * Image URL or array of urls to be used.\n   */\n  source: string | string[]\n\n  /**\n   * The display width in pixels.\n   *\n   * @remarks\n   * Width and height should match the aspect ratio of the frames.\n   */\n  width?: number\n\n  /**\n   * The display height in pixels.\n   *\n   * @remarks\n   * Width and height should match the aspect ratio of the frames.\n   */\n  height?: number\n\n  /**\n   * Number of frames for a full 360 rotation.\n   *\n   * @remarks\n   * If multiple lanes are used, each lane must have this amount of frames.\n   */\n  frames: number\n\n  /**\n   * Number of frames in one row of a single sprite sheet.\n   */\n  framesX?: number\n\n  /**\n   * Number of frames in one column of a single sprite sheet.\n   */\n  framesY?: number\n\n  /**\n   * Number of sequences.\n   */\n  lanes?: number\n\n  /**\n   * Specifies how the frames are sized and scaled if it does not match the given\n   * width and height dimensions.\n   */\n  sizeMode?: SizeMode\n\n  /**\n   * The presentation module to use\n   *\n   * @deprecated please use plugins option instead\n   */\n  module?: string\n  /**\n   * The interaction module to use\n   *\n   * @deprecated please use plugins option instead\n   */\n  behavior?: string\n\n  /**\n   * Specifies the rendering mode.\n   */\n  renderer?: RenderMode\n\n  /**\n   * The initial sequence number to play.\n   *\n   * @remarks\n   * This value is updated each frame and also represents the current lane number.\n   */\n  lane?: number\n  /**\n   * Initial frame number.\n   *\n   * @remarks\n   * This value is updated each frame and also represents the current frame number.\n   */\n  frame?: number\n  /**\n   * Time in ms between updates. e.g. 40 is exactly 25 FPS\n   */\n  frameTime?: number\n  /**\n   * If true, starts the animation automatically on load\n   */\n  animate?: boolean\n  /**\n   * If true, retains the animation after user user interaction\n   */\n  retainAnimate?: boolean\n  /**\n   * If true, animation playback is reversed\n   */\n  reverse?: boolean\n  /**\n   * If true, continues playback in a loop.\n   */\n  loop?: boolean\n  /**\n   * Stops the animation on that frame if `loop` is false.\n   */\n  stopFrame?: number\n\n  /**\n   * If true, allows the user to drag the animation beyond the last frame and wrap over to the beginning.\n   */\n  wrap?: boolean\n  /**\n   * If true, allows the user to drag the animation beyond the last sequence and wrap over to the beginning.\n   */\n  wrapLane?: boolean\n  /**\n   * Sensitivity factor for user interaction\n   */\n  sense?: number\n  /**\n   * Sensitivity factor for user interaction\n   */\n  senseLane?: number\n  /**\n   * Preferred axis for user interaction\n   */\n  orientation?: Orientation | number\n  /**\n   * If true, tries to detect whether the images are down sampled by the browser.\n   */\n  detectSubsampling?: boolean\n  /**\n   * Number of images to preload. If nothing is set, all images are preloaded.\n   */\n  preloadCount?: number\n\n  /**\n   * If true, display width can be controlled by CSS.\n   *\n   * @remarks\n   * Width and height must still both be set and are used to calculate the aspect ratio.\n   */\n  responsive?: boolean\n\n  /**\n   * Time range in ms when touch scroll will be disabled during interaction with SpriteSpin\n   */\n  touchScrollTimer?: [number, number]\n\n  /**\n   * Array of plugins to load\n   */\n  plugins?: any[]\n\n  /**\n   * Allows to download images from foreign origins\n   *\n   * @remarks\n   * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n   */\n  crossOrigin?: string\n}\n\n/**\n * The instance data of SpriteSpin\n *\n * @public\n */\nexport interface Data extends Options {\n  /**\n   * The unique spritespin instance identifier\n   */\n  id: string\n\n  /**\n   * Array of all image urls\n   */\n  source: string[]\n\n  /**\n   * Array of all image elements\n   */\n  images: HTMLImageElement[]\n\n  /**\n   * The current preload progress state\n   */\n  progress: null | PreloadProgress\n\n  /**\n   * Array with measurement information for each image\n   */\n  metrics: SheetSpec[]\n\n  /**\n   * The detected width of a single frame\n   */\n  frameWidth: number\n\n  /**\n   * The detected height of a single frame\n   */\n  frameHeight: number\n\n  /**\n   * Opaque state object. Plugins may store their information here.\n   */\n  state: any\n\n  /**\n   * Is true during the preload phase\n   */\n  loading: boolean\n\n  /**\n   * The target element\n   */\n  target: JQuery\n\n  /**\n   * The inner stage element\n   */\n  stage: JQuery\n\n  /**\n   * The inner canvas element\n   */\n  canvas: JQuery<HTMLCanvasElement>\n\n  /**\n   * The 2D context of the canvas element\n   */\n  context: CanvasRenderingContext2D\n\n  /**\n   * The pixel ratio of the canvas element\n   */\n  canvasRatio: number\n}\n"]}