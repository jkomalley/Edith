{"version":3,"file":"plugins.js","sourceRoot":"","sources":["../../../src/core/plugins.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,UAAU,CAAA;AAatC,MAAM,OAAO,GAAwC,EAAE,CAAA;AAEvD;;;;;;;;;GASG;AACH,MAAM,yBAAyB,IAAY,EAAE,MAAwB;IACnE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,KAAK,CAAC,gBAAgB,IAAI,oBAAoB,CAAC,CAAA;QAC/C,MAAM,CAAA;IACR,CAAC;IACD,MAAM,GAAG,MAAM,IAAI,EAAE,CAAA;IACrB,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAA;IACtB,MAAM,CAAC,MAAM,CAAA;AACf,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,yBAAyB,IAAY,EAAE,MAAwB;IACnE,IAAI,CAAC,8DAA8D,CAAC,CAAA;IACpE,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;AAC9B,CAAC;AAED;;;;;GAKG;AACH,MAAM,oBAAoB,IAAI;IAC5B,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,CAAC;AAED;;;GAGG;AACH,MAAM,uBAAuB,IAAU;IACrC,UAAU,CAAC,IAAI,CAAC,CAAA;IAChB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QAChD,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;QAC5B,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC7B,QAAQ,CAAA;QACV,CAAC;QACD,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,CAAA;QAC9B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,KAAK,CAAC,4BAA4B,GAAG,IAAI,CAAC,CAAA;YAC1C,QAAQ,CAAA;QACV,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAA;IAC1B,CAAC;AACH,CAAC;AAED,oBAAoB,IAAU;IAC5B,mCAAmC;IAEnC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,oDAAoD,CAAC,CAAA;QAC1D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAA;QAC3B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAA;IACrB,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,CAAC,wDAAwD,CAAC,CAAA;QAC9D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;QACnC,OAAO,IAAI,CAAC,UAAU,CAAC,CAAA;IACzB,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACnB,IAAI,CAAC,sDAAsD,CAAC,CAAA;QAC5D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAA;IACvB,CAAC;AACH,CAAC","sourcesContent":["import { error, warn } from '../utils'\nimport { Callback, CallbackOptions, Data } from './models'\n\n/**\n * Describes a SpriteSpin plugin\n *\n * @public\n */\nexport interface SpriteSpinPlugin extends CallbackOptions {\n  [key: string]: Callback | string\n  name?: string\n}\n\nconst plugins: { [key: string]: SpriteSpinPlugin } = {}\n\n/**\n * Registers a plugin.\n *\n * @remarks\n * Use this to add custom Rendering or Updating modules that can be addressed with the 'module' option.\n *\n * @public\n * @param name - The name of the plugin\n * @param plugin - The plugin implementation\n */\nexport function registerPlugin(name: string, plugin: SpriteSpinPlugin) {\n  if (plugins[name]) {\n    error(`Plugin name \"${name}\" is already taken`)\n    return\n  }\n  plugin = plugin || {}\n  plugins[name] = plugin\n  return plugin\n}\n\n/**\n * Registers a plugin.\n *\n * @public\n * @deprecated Use {@link registerPlugin} instead\n * @param name - The name of the plugin\n * @param plugin - The plugin implementation\n */\nexport function registerModule(name: string, plugin: SpriteSpinPlugin) {\n  warn('\"registerModule\" is deprecated, use \"registerPlugin\" instead')\n  registerPlugin(name, plugin)\n}\n\n/**\n * Gets an active plugin by name\n *\n * @internal\n * @param name - The name of the plugin\n */\nexport function getPlugin(name) {\n  return plugins[name]\n}\n\n/**\n * Replaces module names on given SpriteSpin data and replaces them with actual implementations.\n * @internal\n */\nexport function applyPlugins(data: Data) {\n  fixPlugins(data)\n  for (let i = 0; i < data.plugins.length; i += 1) {\n    const name = data.plugins[i]\n    if (typeof name !== 'string') {\n      continue\n    }\n    const plugin = getPlugin(name)\n    if (!plugin) {\n      error('No plugin found with name ' + name)\n      continue\n    }\n    data.plugins[i] = plugin\n  }\n}\n\nfunction fixPlugins(data: Data) {\n  // tslint:disable no-string-literal\n\n  if (data['mods']) {\n    warn('\"mods\" option is deprecated, use \"plugins\" instead')\n    data.plugins = data['mods']\n    delete data['mods']\n  }\n\n  if (data['behavior']) {\n    warn('\"behavior\" option is deprecated, use \"plugins\" instead')\n    data.plugins.push(data['behavior'])\n    delete data['behavior']\n  }\n\n  if (data['module']) {\n    warn('\"module\" option is deprecated, use \"plugins\" instead')\n    data.plugins.push(data['module'])\n    delete data['module']\n  }\n}\n"]}