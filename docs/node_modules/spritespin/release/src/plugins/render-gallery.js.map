{"version":3,"file":"render-gallery.js","sourceRoot":"","sources":["../../../src/plugins/render-gallery.ts"],"names":[],"mappings":"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","sourcesContent":["import * as SpriteSpin from '../core'\nimport * as Utils from '../utils'\n\n(() => {\n\nconst NAME = 'gallery'\n\ninterface GalleryState {\n  images: any[]\n  offsets: any[]\n  speed: number\n  opacity: number\n  frame: number\n  stage: any\n  dX: number\n  ddX: number\n}\n\nfunction getState(data) {\n  return SpriteSpin.getPluginState(data, NAME) as GalleryState\n}\n\nfunction getOption(data, name, fallback) {\n  return data[name] || fallback\n}\n\nfunction load(e, data: SpriteSpin.Data) {\n  const state = getState(data)\n\n  state.images = []\n  state.offsets = []\n  state.frame = data.frame\n  state.speed = getOption(data, 'gallerySpeed', 500)\n  state.opacity = getOption(data, 'galleryOpacity', 0.25)\n  state.stage = getOption(data, 'galleryStage', Utils.$('<div></div>'))\n\n  state.stage.empty().addClass('gallery-stage').prependTo(data.stage)\n\n  let size = 0\n  for (const image of data.images) {\n    const naturalSize = Utils.naturalSize(image)\n    const scale = data.height / naturalSize.height\n\n    const img = Utils.$(image)\n    state.stage.append(img)\n    state.images.push(img)\n    state.offsets.push(-size + (data.width - image.width * scale) / 2)\n    size += data.width\n    img.css({\n      'max-width' : 'initial',\n      opacity : state.opacity,\n      width: data.width,\n      height: data.height\n    })\n  }\n  const innerSize = Utils.getInnerSize(data)\n  const outerSize = data.responsive ? Utils.getComputedSize(data) : Utils.getOuterSize(data)\n  const layout = Utils.getInnerLayout(data.sizeMode, innerSize, outerSize)\n  state.stage.css(layout).css({ width: size, left: state.offsets[state.frame] })\n  state.images[state.frame].animate({ opacity : 1 }, { duration: state.speed })\n}\n\nfunction draw(e, data: SpriteSpin.Data) {\n  const state = getState(data)\n  const input = SpriteSpin.getInputState(data)\n  const isDragging = SpriteSpin.is(data, 'dragging')\n  if (state.frame !== data.frame && !isDragging) {\n    state.stage.stop(true, false).animate({ left : state.offsets[data.frame] }, { duration: state.speed })\n\n    state.images[state.frame].animate({ opacity : state.opacity }, { duration: state.speed })\n    state.frame = data.frame\n    state.images[state.frame].animate({ opacity : 1 }, { duration: state.speed })\n    state.stage.animate({ left : state.offsets[state.frame] })\n  } else if (isDragging || state.dX !== input.dX) {\n    state.dX = input.dX\n    state.ddX = input.ddX\n    state.stage.stop(true, true).css({ left : state.offsets[state.frame] + state.dX })\n  }\n}\n\nSpriteSpin.registerPlugin(NAME, {\n  name: NAME,\n  onLoad: load,\n  onDraw: draw\n})\n\n})()\n"]}