{"version":3,"file":"input.js","sourceRoot":"","sources":["../../../src/core/input.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCursorPosition } from '../utils'\nimport { Data } from './models'\nimport { getState } from './state'\n\n/**\n * Describes a SpriteSpin input state\n *\n * @public\n */\nexport interface InputState {\n  oldX: number\n  oldY: number\n  currentX: number\n  currentY: number\n  startX: number\n  startY: number\n  clickframe: number\n  clicklane: number\n  dX: number\n  dY: number\n  ddX: number\n  ddY: number\n  ndX: number\n  ndY: number\n  nddX: number\n  nddY: number\n}\n\n/**\n * Gets the current input state\n *\n * @public\n * @param data - The SpriteSpin instance data\n */\nexport function getInputState(data: Data): InputState {\n  return getState(data, 'input')\n}\n\n/**\n * Updates the input state using a mouse or touch event.\n *\n * @public\n * @param e - The input event\n * @param data - The SpriteSpin instance data\n */\nexport function updateInput(e, data: Data) {\n  const cursor = getCursorPosition(e)\n  const state = getInputState(data)\n\n  // cache positions from previous frame\n  state.oldX = state.currentX\n  state.oldY = state.currentY\n\n  state.currentX = cursor.x\n  state.currentY = cursor.y\n\n  // Fix old position.\n  if (state.oldX === undefined || state.oldY === undefined) {\n    state.oldX = state.currentX\n    state.oldY = state.currentY\n  }\n\n  // Cache the initial click/touch position and store the frame number at which the click happened.\n  // Useful for different behavior implementations. This must be restored when the click/touch is released.\n  if (state.startX === undefined || state.startY === undefined) {\n    state.startX = state.currentX\n    state.startY = state.currentY\n    state.clickframe = data.frame\n    state.clicklane = data.lane\n  }\n\n  // Calculate the vector from start position to current pointer position.\n  state.dX = state.currentX - state.startX\n  state.dY = state.currentY - state.startY\n\n  // Calculate the vector from last frame position to current pointer position.\n  state.ddX = state.currentX - state.oldX\n  state.ddY = state.currentY - state.oldY\n\n  // Normalize vectors to range [-1:+1]\n  state.ndX = state.dX / data.target.innerWidth()\n  state.ndY = state.dY / data.target.innerHeight()\n\n  state.nddX = state.ddX / data.target.innerWidth()\n  state.nddY = state.ddY / data.target.innerHeight()\n}\n\n/**\n * Resets the input state.\n *\n * @public\n */\nexport function resetInput(data: Data) {\n  const input = getInputState(data)\n  input.startX = input.startY = undefined\n  input.currentX = input.currentY = undefined\n  input.oldX = input.oldY = undefined\n  input.dX = input.dY = 0\n  input.ddX = input.ddY = 0\n  input.ndX = input.ndY = 0\n  input.nddX = input.nddY = 0\n}\n"]}