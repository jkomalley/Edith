{"version":3,"file":"playback.js","sourceRoot":"","sources":["../../../src/core/playback.ts"],"names":[],"mappings":"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","sourcesContent":["import { clamp, wrap } from '../utils'\nimport { namespace } from './constants'\nimport { Data } from './models'\nimport { getState } from './state'\n/**\n * Gets the playback state\n *\n * @public\n * @param data - The SpriteSpin instance data\n */\nexport function getPlaybackState(data: Data): PlaybackState {\n  return getState(data, 'playback')\n}\n\n/**\n * The playback state\n *\n * @public\n */\nexport interface PlaybackState {\n  frameTime: number\n  lastFrame: number\n  lastLane: number\n  handler: number\n}\n\nfunction updateLane(data: Data, lane: number) {\n  data.lane = data.wrapLane\n    ? wrap(lane, 0, data.lanes - 1, data.lanes)\n    : clamp(lane, 0, data.lanes - 1)\n}\n\nfunction updateAnimationFrame(data: Data) {\n  data.frame += (data.reverse ? -1 : 1)\n  // wrap the frame value to fit in range [0, data.frames)\n  data.frame = wrap(data.frame, 0, data.frames - 1, data.frames)\n  // stop animation if loop is disabled and the stopFrame is reached\n  if (!data.loop && (data.frame === data.stopFrame)) {\n    stopAnimation(data)\n  }\n}\n\nfunction updateInputFrame(data: Data, frame: number) {\n  data.frame = Number(frame)\n  data.frame = data.wrap\n    ? wrap(data.frame, 0, data.frames - 1, data.frames)\n    : clamp(data.frame, 0, data.frames - 1)\n}\n\nfunction updateAnimation(data: Data) {\n  const state = getPlaybackState(data)\n  if (state.handler) {\n    updateBefore(data)\n    updateAnimationFrame(data)\n    updateAfter(data)\n  }\n}\n\nfunction updateBefore(data: Data) {\n  const state = getPlaybackState(data)\n  state.lastFrame = data.frame\n  state.lastLane = data.lane\n}\n\nfunction updateAfter(data: Data) {\n  const state = getPlaybackState(data)\n  if (state.lastFrame !== data.frame || state.lastLane !== data.lane) {\n    data.target.trigger('onFrameChanged.' + namespace, data)\n  }\n  data.target.trigger('onFrame.' + namespace, data)\n  data.target.trigger('onDraw.' + namespace, data)\n}\n\n/**\n * Updates the frame or lane number of the SpriteSpin data.\n *\n * @public\n * @param data - The SpriteSpin instance data\n * @param frame - The frame number to set\n * @param lane - The lane number to set\n */\nexport function updateFrame(data: Data, frame?: number, lane?: number) {\n  updateBefore(data)\n  if (frame != null) {\n    updateInputFrame(data, frame)\n  }\n  if (lane != null) {\n    updateLane(data, lane)\n  }\n  updateAfter(data)\n}\n\n/**\n * Stops the running animation.\n *\n * @public\n * @param data - The SpriteSpin instance data\n */\nexport function stopAnimation(data: Data) {\n  data.animate = false\n  const state = getPlaybackState(data)\n  if (state.handler != null) {\n    window.clearInterval(state.handler)\n    state.handler = null\n  }\n}\n\n/**\n * Starts animation playback if needed.\n *\n * @remarks\n * Starts animation playback if `animate` property is `true` and the animation is not yet running.\n *\n * @public\n * @param data - The SpriteSpin instance data\n */\nexport function applyAnimation(data: Data) {\n  const state = getPlaybackState(data)\n  if (state.handler && (!data.animate || state.frameTime !== data.frameTime)) {\n    stopAnimation(data)\n  }\n  if (data.animate && !state.handler) {\n    state.frameTime = data.frameTime\n    state.handler = window.setInterval(() => updateAnimation(data), state.frameTime)\n  }\n}\n\n/**\n * Starts the animation playback\n *\n * @remarks\n * Starts the animation playback and also sets the `animate` property to `true`\n *\n * @public\n * @param data - The SpriteSpin instance data\n */\nexport function startAnimation(data: Data) {\n  data.animate = true\n  applyAnimation(data)\n}\n"]}