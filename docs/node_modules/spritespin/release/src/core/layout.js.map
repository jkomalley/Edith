{"version":3,"file":"layout.js","sourceRoot":"","sources":["../../../src/core/layout.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,UAAU,CAAA;AAGjC;;;;GAIG;AACH,MAAM,sBAAsB,IAAU;IACpC,oBAAoB;IACpB,IAAI,CAAC,MAAM;SACR,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC;SAC1B,GAAG,CAAC;QACH,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,EAAE;QACV,iBAAiB,EAAE,MAAM;QACzB,kBAAkB,EAAE,MAAM;QAC1B,oBAAoB,EAAE,MAAM;QAC5B,qBAAqB,EAAE,MAAM;QAC7B,aAAa,EAAE,MAAM;KACtB,CAAC,CAAA;IAEJ,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;IACrF,IAAM,MAAM,GAAG,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAA;IAElF,yBAAyB;IACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACd,KAAK,EAAM,IAAI,CAAC,KAAK;QACrB,MAAM,EAAK,IAAI,CAAC,MAAM;QACtB,QAAQ,EAAG,UAAU;QACrB,QAAQ,EAAG,QAAQ;KACpB,CAAC,CAAA;IAEF,wBAAwB;IACxB,IAAI,CAAC,KAAK;SACP,GAAG,CAAC,MAAM,CAAC;SACX,IAAI,EAAE,CAAA;IAET,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAAC,MAAM,CAAA;IAAC,CAAC;IAC5B,yBAAyB;IACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAA;IAC9B,8BAA8B;IAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACrE,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC1E,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAE,MAAM,CAAC,KAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,KAAK,CAAA;QAClF,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAE,MAAM,CAAC,MAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,MAAM,CAAA;IACvF,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAA;QACtD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,CAAA;IAC1D,CAAC;IACD,oDAAoD;IACpD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;AACxD,CAAC","sourcesContent":["import * as Utils from '../utils'\nimport { Data } from './models'\n\n/**\n * Applies css attributes to layout the SpriteSpin containers.\n *\n * @internal\n */\nexport function applyLayout(data: Data) {\n  // disable selection\n  data.target\n    .attr('unselectable', 'on')\n    .css({\n      width: '',\n      height: '',\n      '-ms-user-select': 'none',\n      '-moz-user-select': 'none',\n      '-khtml-user-select': 'none',\n      '-webkit-user-select': 'none',\n      'user-select': 'none'\n    })\n\n  const size = data.responsive ? Utils.getComputedSize(data) : Utils.getOuterSize(data)\n  const layout = Utils.getInnerLayout(data.sizeMode, Utils.getInnerSize(data), size)\n\n  // apply layout on target\n  data.target.css({\n    width    : size.width,\n    height   : size.height,\n    position : 'relative',\n    overflow : 'hidden'\n  })\n\n  // apply layout on stage\n  data.stage\n    .css(layout)\n    .hide()\n\n  if (!data.canvas) { return }\n  // apply layout on canvas\n  data.canvas.css(layout).hide()\n  // apply pixel ratio on canvas\n  data.canvasRatio = data.canvasRatio || Utils.pixelRatio(data.context)\n  if (typeof layout.width === 'number' && typeof layout.height === 'number') {\n    data.canvas[0].width = ((layout.width as number) * data.canvasRatio) || size.width\n    data.canvas[0].height = ((layout.height as number) * data.canvasRatio) || size.height\n  } else {\n    data.canvas[0].width = (size.width * data.canvasRatio)\n    data.canvas[0].height = (size.height * data.canvasRatio)\n  }\n  // width and height must be set before calling scale\n  data.context.scale(data.canvasRatio, data.canvasRatio)\n}\n"]}