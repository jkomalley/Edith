{"version":3,"file":"preload.js","sourceRoot":"","sources":["../../../src/utils/preload.ts"],"names":[],"mappings":"AAAA,iBAAiB,OAAY,EAAE,GAAU;IACvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACpC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,CAAC,CAAA;QACV,CAAC;IACH,CAAC;AACH,CAAC;AAED;IACE,EAAE;AACJ,CAAC;AAsBD,MAAM,kBAAkB,IAAoB;IAC1C,IAAI,GAAa,CAAA;IACjB,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;IACzB,GAAG,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;IACjD,uDAAuD;IAEvD,IAAM,MAAM,GAAG,EAAE,CAAA;IACjB,IAAM,WAAW,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,GAAG,CAAC,MAAM,CAAC,CAAA;IACrD,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAA;IAC1C,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAA;IACxC,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAA;IAExC,IAAI,KAAK,GAAG,CAAC,CAAA;IACb,IAAI,SAAS,GAAG,KAAK,CAAA;IACrB,IAAI,WAAW,GAAG,KAAK,CAAA;IAEvB,IAAM,IAAI,GAAG;QACX,KAAK,IAAI,CAAC,CAAA;QAEV,UAAU,CAAC;YACT,KAAK,EAAE,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;YAC5B,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,GAAG,CAAC,MAAM;YACjB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC;SAChD,CAAC,CAAA;QAEF,WAAW,GAAG,WAAW,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;QAEjD,EAAE,CAAC,CAAC,WAAW,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC,CAAC;YACxD,SAAS,GAAG,IAAI,CAAA;YAChB,UAAU,CAAC,MAAM,CAAC,CAAA;QACpB,CAAC;IACH,CAAC,CAAA;IAED,GAAG,CAAC,CAAc,UAAG,EAAH,WAAG,EAAH,iBAAG,EAAH,IAAG;QAAhB,IAAM,GAAG,YAAA;QACZ,IAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAA;QACvB,cAAc;QACd,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAChB,uEAAuE;QACvE,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAA;QAClC,4CAA4C;QAC5C,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,GAAG,IAAI,CAAA;QAC7C,aAAa;QACb,GAAG,CAAC,GAAG,GAAG,GAAG,CAAA;KACd;IAED,WAAW,CAAC,MAAM,CAAC,CAAA;AACrB,CAAC","sourcesContent":["function indexOf(element: any, arr: any[]) {\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === element) {\n      return i\n    }\n  }\n}\n\nfunction noop() {\n  //\n}\n\nexport interface PreloadOptions {\n  source: string | string[]\n  crossOrigin?: string\n  preloadCount?: number\n  initiated?: (images: HTMLImageElement[]) => void\n  progress?: (p: PreloadProgress) => void\n  complete?: (images: HTMLImageElement[]) => void\n}\n\nexport interface PreloadProgress {\n  // The image index that currently has been loaded\n  index: number\n  // The number of images that have been loaded so far\n  loaded: number\n  // The total number of images to load\n  total: number\n  // Percentage value\n  percent: number\n}\n\nexport function preload(opts: PreloadOptions) {\n  let src: string[]\n  const input = opts.source\n  src = typeof input === 'string' ? [input] : input\n  // const src: string[] =  ? [opts.source] : opts.source\n\n  const images = []\n  const targetCount = (opts.preloadCount || src.length)\n  const onInitiated = opts.initiated || noop\n  const onProgress = opts.progress || noop\n  const onComplete = opts.complete || noop\n\n  let count = 0\n  let completed = false\n  let firstLoaded = false\n\n  const tick = function () { // tslint:disable-line\n    count += 1\n\n    onProgress({\n      index: indexOf(this, images),\n      loaded: count,\n      total: src.length,\n      percent: Math.round((count / src.length) * 100)\n    })\n\n    firstLoaded = firstLoaded || (this === images[0])\n\n    if (firstLoaded && !completed && (count >= targetCount)) {\n      completed = true\n      onComplete(images)\n    }\n  }\n\n  for (const url of src) {\n    const img = new Image()\n    // push result\n    images.push(img)\n    // https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\n    img.crossOrigin = opts.crossOrigin\n    // bind logic, don't care about abort/errors\n    img.onload = img.onabort = img.onerror = tick\n    // begin load\n    img.src = url\n  }\n\n  onInitiated(images)\n}\n"]}