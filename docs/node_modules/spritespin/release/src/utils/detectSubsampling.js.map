{"version":3,"file":"detectSubsampling.js","sourceRoot":"","sources":["../../../src/utils/detectSubsampling.ts"],"names":[],"mappings":"AAAA,IAAI,MAAyB,CAAA;AAC7B,IAAI,OAAiC,CAAA;AAErC;IACE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC,OAAO,CAAA;IAChB,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACZ,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;IAC3C,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;IACjC,MAAM,CAAC,OAAO,CAAA;AAChB,CAAC;AAED;;;;GAIG;AACH,MAAM,4BAA4B,GAAqB,EAAE,KAAa,EAAE,MAAc;IAEpF,EAAE,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QACxB,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;IAED,mDAAmD;IACnD,EAAE,CAAC,CAAC,KAAK,GAAG,MAAM,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;IAED,8DAA8D;IAC9D,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAA;IAChC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAA;IAC7B,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;IAC5B,uEAAuE;IACvE,+DAA+D;IAC/D,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;IAErC,oEAAoE;IACpE,kEAAkE;IAClE,IAAI,CAAC;QACH,IAAM,GAAG,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;QACjD,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAA;IAC/D,CAAC;IAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,2EAA2E;QAC3E,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;AACH,CAAC","sourcesContent":["let canvas: HTMLCanvasElement\nlet context: CanvasRenderingContext2D\n\nfunction detectionContext() {\n  if (context) {\n    return context\n  }\n\n  if (!canvas) {\n    canvas = document.createElement('canvas')\n  }\n  if (!canvas || !canvas.getContext) {\n    return null\n  }\n\n  context = canvas.getContext('2d')\n  return context\n}\n\n/**\n * Idea taken from https://github.com/stomita/ios-imagefile-megapixel\n * Detects whether the image has been sub sampled by the browser and does not have its original dimensions.\n * This method unfortunately does not work for images that have transparent background.\n */\nexport function detectSubsampling(img: HTMLImageElement, width: number, height: number) {\n\n  if (!detectionContext()) {\n    return false\n  }\n\n  // sub sampling happens on images above 1 megapixel\n  if (width * height <= 1024 * 1024) {\n    return false\n  }\n\n  // set canvas to 1x1 pixel size and fill it with magenta color\n  canvas.width = canvas.height = 1\n  context.fillStyle = '#FF00FF'\n  context.fillRect(0, 0, 1, 1)\n  // render the image with a negative offset to the left so that it would\n  // fill the canvas pixel with the top right pixel of the image.\n  context.drawImage(img, -width + 1, 0)\n\n  // check color value to confirm image is covering edge pixel or not.\n  // if color still magenta, the image is assumed to be sub sampled.\n  try {\n    const dat = context.getImageData(0, 0, 1, 1).data\n    return (dat[0] === 255) && (dat[1] === 0) && (dat[2] === 255)\n  } catch (err) {\n    // avoids cross origin exception for chrome when code runs without a server\n    return false\n  }\n}\n"]}