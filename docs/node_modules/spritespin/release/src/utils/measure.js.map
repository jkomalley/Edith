{"version":3,"file":"measure.js","sourceRoot":"","sources":["../../../src/utils/measure.ts"],"names":[],"mappings":"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","sourcesContent":["import { detectSubsampling } from './detectSubsampling'\nimport { naturalSize } from './naturalSize'\n/**\n *\n */\nexport interface MeasureSheetOptions {\n  frames: number\n  framesX?: number\n  framesY?: number\n  detectSubsampling?: boolean\n}\n\n/**\n *\n */\nexport interface SheetSpec {\n  id: number\n  width: number\n  height: number\n  sprites: SpriteSpec[]\n\n  sampledWidth?: number\n  sampledHeight?: number\n  isSubsampled?: boolean\n}\n\n/**\n *\n */\nexport interface SpriteSpec {\n  id: number\n  x: number\n  y: number\n  width: number\n  height: number\n\n  sampledX?: number\n  sampledY?: number\n  sampledWidth?: number\n  sampledHeight?: number\n}\n\n/**\n * Measures the image frames that are used in the given data object\n */\nexport function measure(images: HTMLImageElement[], options: MeasureSheetOptions): SheetSpec[] {\n  if (images.length === 1) {\n    return [measureSheet(images[0], options)]\n  } else if (options.framesX && options.framesY) {\n    return measureMutipleSheets(images, options)\n  } else {\n    return measureFrames(images, options)\n  }\n}\n\nfunction measureSheet(image: HTMLImageElement, options: MeasureSheetOptions): SheetSpec {\n  const result: SheetSpec = { id: 0, sprites: [] } as any\n  measureImage(image, options, result)\n  const frames = options.frames\n  const framesX = Number(options.framesX) || frames\n  const framesY = Math.ceil(frames / framesX)\n  const frameWidth = Math.floor(result.width / framesX)\n  const frameHeight = Math.floor(result.height / framesY)\n  const divisor = result.isSubsampled ? 2 : 1\n  for (let i = 0; i < frames; i++) {\n    const x = (i % framesX) * frameWidth\n    const y = Math.floor(i / framesX) * frameHeight\n    result.sprites.push({\n      id: i,\n      x: x, y: y,\n      width: frameWidth,\n      height: frameHeight,\n      sampledX: x / divisor,\n      sampledY: y / divisor,\n      sampledWidth: frameWidth / divisor,\n      sampledHeight: frameHeight / divisor\n    })\n  }\n  return result\n}\n\nfunction measureFrames(images: HTMLImageElement[], options: MeasureSheetOptions): SheetSpec[] {\n  const result: SheetSpec[] = []\n  for (let id = 0; id < images.length; id++) {\n    // TODO: optimize\n    // don't measure images with same size twice\n    const sheet = measureSheet(images[id], { frames: 1, framesX: 1, detectSubsampling: options.detectSubsampling })\n    sheet.id = id\n    result.push(sheet)\n  }\n  return result\n}\n\nfunction measureMutipleSheets(images: HTMLImageElement[], options: MeasureSheetOptions): SheetSpec[] {\n  const result: SheetSpec[] = []\n  for (let id = 0; id < images.length; id++) {\n    // TODO: optimize\n    // don't measure images with same size twice\n    const sheet = measureSheet(images[id], {\n      frames: undefined,\n      framesX: options.framesX,\n      framesY: options.framesY,\n      detectSubsampling: options.detectSubsampling\n    })\n    sheet.id = id\n    result.push(sheet)\n  }\n  return result\n}\n\nfunction measureImage(image: HTMLImageElement, options: MeasureSheetOptions, result: SheetSpec): SheetSpec {\n  const size = naturalSize(image)\n  result.isSubsampled = options.detectSubsampling && detectSubsampling(image, size.width, size.height)\n  result.width = size.width\n  result.height = size.height\n  result.sampledWidth = size.width / (result.isSubsampled ? 2 : 1)\n  result.sampledHeight = size.height / (result.isSubsampled ? 2 : 1)\n  return result\n}\n\nexport function findSpecs(metrics: SheetSpec[], frames: number, frame: number, lane: number) {\n  let spriteId = lane * frames + frame\n  let sheetId = 0\n  let sprite: SpriteSpec = null\n  let sheet: SheetSpec = null\n\n  while (true) {\n    sheet = metrics[sheetId]\n    if (!sheet) { break }\n\n    if (spriteId >= sheet.sprites.length) {\n      spriteId -= sheet.sprites.length\n      sheetId++\n      continue\n    }\n\n    sprite = sheet.sprites[spriteId]\n    break\n  }\n  return { sprite, sheet }\n}\n"]}